#+title: swh-git-loader - Specification (draft)
#+author: swh team
#+source: https://intranet.softwareheritage.org/index.php/Swh_git_loader

The Software Heritage Git Loader is a tool and a library to walk a local Git repository and inject into the SWH dataset all contained files that weren't known before.

* License

This program is free software: you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

See top-level LICENSE file for the full text of the GNU General Public License
along with this program.

* Dependencies

** Runtime

- python3
- python3-psycopg2
- python3-pygit2

** Test

- python3-nose

* Requirements

- implementation language, Python3
- coding guidelines: conform to PEP8
- Git access: via libgit2/pygit
- cache: implemented as Postgres tables

* Configuration

swh-git-loader depends on some tools, here are the configuration files for those:
** swh-db-manager

This is solely a tool in charge of db cleanup now.

Create a configuration file in *~/.config/db-manager.ini*

#+begin_src ini
[main]

# Where to store the logs
log_dir = swh-git-loader/log

# url access to db
db_url = dbname=swhgitloader
#+end_src

See http://initd.org/psycopg/docs/module.html#psycopg2.connect for the db url's schema

** swh-git-loader

Create a configuration file in *~/.config/swh/git-loader.ini*:

#+begin_src ini
[main]
# Where to store the logs
log_dir = /tmp/swh-git-loader/log

# url access to api's backend
backend_url = http://localhost:5000
#+end_src

Note:
- [[http://initd.org/psycopg/docs/module.html#psycopg2.connect][DB url DSL]]
- the configuration file can be changed in the CLI with the flag `-c <config-filepath>` or `--config-file <config-filepath>`
** swh-backend

Backend api.
This

Create a configuration file in *~/.config/swh/back.ini*:
#+begin_src ini
[main]

# where to store blob on disk
content_storage_dir = /tmp/swh-git-loader/content-storage

# Where to store the logs
log_dir = swh-git-loader/log

# url access to db: dbname=<host> (port=<port> user=<user> pass=<pass>)
db_url = dbname=swhgitloader

# activate the compression for each vcs stored object
# storage_compression = true

# compute folder's depth on disk aa/bb/cc/dd
# folder_depth = 2

# Debugger (for dev only)
debug = true

# server port to listen to requests
port = 6000
#+end_src
See http://initd.org/psycopg/docs/module.html#psycopg2.connect for the db url's schema

* Run
** Environment initialization

#+begin_src sh
export PYTHONPATH=`pwd`:$PYTHONPATH
#+end_src

** Backend

*** With initialization

This depends on swh-sql repository, so:
#+begin_src sh
cd /path/to/swh-sql && make clean initdb DBNAME=softwareheritage-dev
#+end_src

Using the Makefile eases:
#+begin_src sh
make drop-db create-db run-back FOLLOW_LOG=-f
#+end_src

*** without initialization

Running the backend.

#+begin_src sh
./bin/swh-backend -v
#+end_src

With makefile:

#+begin_src sh
make run-back FOLLOW_LOG=-f
#+end_src

** Help

#+begin_src sh
bin/swh-git-loader --help
bin/swh-db-manager --help
#+end_src

** Parse a repository from a clean slate

Clean and initialize the model then parse the repository git:
#+begin_src sh
bin/swh-db-manager cleandb
bin/swh-git-loader load /path/to/git/repo
#+end_src

For ease:
#+begin_src sh
time make cleandb run REPO_PATH=~/work/inria/repo/swh-git-cloner
#+end_src

** Parse an existing repository

#+begin_src sh
bin/swh-git-loader load /path/to/git/repo
#+end_src

** Clean data

This will truncate the relevant table in the schema
#+begin_src sh
bin/swh-db-manager cleandb
#+end_src

For ease:
#+begin_src sh
make cleandb
#+end_src

** Init data

#+begin_src sh
make drop-db create-db
#+end_src
