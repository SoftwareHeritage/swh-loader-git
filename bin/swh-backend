#!/usr/bin/env python3

# Copyright (C) 2015  Stefano Zacchiroli <zack@upsilon.cc>,
#                     Antoine R. Dumont <antoine.romain.dumont@gmail.com>
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

import argparse
import configparser
import logging
import os

from swh.backend import api


# Default configuration file
DEFAULT_CONF_FILE = '~/.config/swh/back.ini'


# default configuration (can be overriden by the DEFAULT_CONF_FILE)
DEFAULT_CONF = {
    'content_storage_dir': '/tmp/swh-git-loader/content-storage',
    'log_dir': '/tmp/swh-git-loader/log',
    'db_url': 'dbname=softwareheritage-dev',
    'storage_compression': None,
    'folder_depth': 4,
    'debug': None
}


def parse_args():
    """Parse the configuration for the cli.
    """
    cli = argparse.ArgumentParser(
        description='Parse git repository objects to load them into DB.')
    cli.add_argument('--verbose', '-v', action='store_true',
                     help='Verbosity level in log file.')
    cli.add_argument('--config', '-c', help='configuration file path')

    args = cli.parse_args()

    return args

def read_conf(args):
    """Read the user's configuration file.

    args contains the repo to parse.
    Transmit to the result.
    """
    config = configparser.ConfigParser(defaults=DEFAULT_CONF)
    conf_file = args.config or DEFAULT_CONF_FILE
    config.read(os.path.expanduser(conf_file))
    conf = config._sections['main']

    conf['folder_depth'] = DEFAULT_CONF['folder_depth'] \
                              if 'folder_depth' not in conf \
                              else int(conf['folder_depth'])

    # remaining missing default configuration key are set
    for key in DEFAULT_CONF:
        conf[key] = conf.get(key, DEFAULT_CONF[key])

    return conf

if __name__ == '__main__':
   args = parse_args()
   conf = read_conf(args)
   log_filename = os.path.join(conf['log_dir'], 'back.log')
   logging.basicConfig(filename=log_filename,
                       level=logging.DEBUG if args.verbose else logging.INFO)
   api.run(conf)
