#!/usr/bin/env python3

# Copyright (C) 2015  Stefano Zacchiroli <zack@upsilon.cc>,
#                     Antoine R. Dumont <antoine.romain.dumont@gmail.com>
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

import argparse
import configparser
import logging
import os

from sgloader.sgloader import run


# Default configuration file
DEFAULT_CONF_FILE = '~/.config/sgloader.ini'


# default configuration (can be overriden by the DEFAULT_CONF_FILE)
DEFAULT_CONF = {
    'dataset_dir': './dataset',
    'log_dir': './log',
    'db_url': 'host=localhost db_name=swhgitloader user=tony'
}


def parse_args():
    """ Parse the configuration for the cli.
    """
    cli = argparse.ArgumentParser(
        description='Parse git repositories objects and load them into a DB.')
    cli.add_argument('--verbose', '-v', action='store_true', help='Be verbose')
    cli.add_argument('--repo-path', '-r',
                     dest='repo_path',
                     help='Provide the git repository\'s path.')

    subcli = cli.add_subparsers(dest='action')
    subcli.add_parser('initdb', help='Initialize DB data')
    subcli.add_parser('cleandb', help='Clean DB data')

    args = cli.parse_args()

    if not args.repo_path and args.action != 'cleandb':
        cli.error('No repository given')

    return args


def read_conf(args):
    """Read the user's configuration file.

    args contains the repo to parse.
    Transmit to the result.

    (No cli override.)
    """
    config = configparser.ConfigParser(defaults=DEFAULT_CONF)
    config.read(os.path.expanduser(DEFAULT_CONF_FILE))

    conf = config._sections['main']
    conf['repo_path'] = args.repo_path

    return conf


if __name__ == '__main__':
    args = parse_args()
    conf = read_conf(args)

    log_filename = os.path.join(conf['log_dir'], 'sgloader.log')
    logging.basicConfig(filename=log_filename,
                        level=logging.DEBUG if args.verbose else logging.INFO)

    run(args.action, conf['db_url'], conf['repo_path'], conf['dataset_dir'])
