#!/usr/bin/env python3

# Copyright (C) 2015  Stefano Zacchiroli <zack@upsilon.cc>,
#                     Antoine R. Dumont <antoine.romain.dumont@gmail.com>
# See the AUTHORS file at the top-level directory of this distribution
# License: GNU General Public License version 3, or any later version
# See top-level LICENSE file for more information

import argparse
import configparser
import logging
import os

from swh.gitloader.loader import run


# Default configuration file
DEFAULT_CONF_FILE = '~/.config/sgloader2.ini'


# default configuration (can be overriden by the DEFAULT_CONF_FILE)
DEFAULT_CONF = {
    'dataset_dir': './dataset',
    'log_dir': './log',
    'db_url': 'dbname=swhgitloader'
}


def parse_args():
    """ Parse the configuration for the cli.
    """
    cli = argparse.ArgumentParser(
        description='Parse git repository objects to load them into DB.')

    cli.add_argument('--verbose', '-v', action='store_true',
                     help='Verbosity level in log file.')

    cli.add_argument('--configuration-file', '-c', dest='conf_file',
                     help='Configuration file path to load db access, ' +
                     'log file, etc...')

    cli.add_argument('--load-repo', '-l',
                     dest='repo_path',
                     help='Git repository path to load.')

    cli.add_argument('--actions', '-a', dest='actions', nargs='?',
                     help='Comma separated action values in [initdb|cleandb]',
                     default='initdb')

    args = cli.parse_args()

    return args


def read_conf(args):
    """Read the user's configuration file.

    args contains the repo to parse.
    Transmit to the result.

    (No cli override.)
    """
    config = configparser.ConfigParser(defaults=DEFAULT_CONF)
    conf_file = DEFAULT_CONF_FILE if args.conf_file is None else args.conf_file
    config.read(os.path.expanduser(conf_file))

    conf = config._sections['main']
    conf['repo_path'] = args.repo_path

    actions = args.actions
    conf['actions'] = actions if actions is None else actions.split(',')

    return conf


if __name__ == '__main__':
    args = parse_args()
    conf = read_conf(args)

    log_filename = os.path.join(conf['log_dir'], 'sgloader.log')
    logging.basicConfig(filename=log_filename,
                        level=logging.DEBUG if args.verbose else logging.INFO)

    run(conf['actions'],
        conf['db_url'],
        conf['repo_path'],
        conf['dataset_dir'])
